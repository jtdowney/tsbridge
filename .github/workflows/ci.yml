name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Go Test
        run: go test ./...

      - name: Go Build
        run: |
          VERSION=$(git describe --tags --always --dirty)
          go build -ldflags "-X main.version=$VERSION" -v ./cmd/...

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push PR Docker Images
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA_SHORT=$(git rev-parse --short HEAD)
          
          # Tag and push AMD64 image
          docker tag ghcr.io/jtdowney/tsbridge:latest-amd64 ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-amd64
          docker tag ghcr.io/jtdowney/tsbridge:latest-amd64 ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-amd64
          docker push ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-amd64
          docker push ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-amd64
          
          # Tag and push ARM64 image
          docker tag ghcr.io/jtdowney/tsbridge:latest-arm64 ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-arm64
          docker tag ghcr.io/jtdowney/tsbridge:latest-arm64 ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-arm64
          docker push ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-arm64
          docker push ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-arm64
          
          # Create and push multi-arch manifests
          docker manifest create ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER} \
            ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-amd64 \
            ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}-arm64
          docker manifest push ghcr.io/jtdowney/tsbridge:pr-${PR_NUMBER}
          
          docker manifest create ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT} \
            ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-amd64 \
            ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}-arm64
          docker manifest push ghcr.io/jtdowney/tsbridge:sha-${SHA_SHORT}
          
          # Clean up architecture-specific tags
          echo "Cleaning up architecture-specific tags..."
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} ./scripts/cleanup-arch-tags.sh "pr-${PR_NUMBER}"
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} ./scripts/cleanup-arch-tags.sh "sha-${SHA_SHORT}"
