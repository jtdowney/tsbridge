name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up architecture-specific Docker tags
        run: |
          # Extract the tag from the ref
          TAG=${GITHUB_REF#refs/tags/}
          echo "Cleaning up architecture-specific tags for release ${TAG}"
          
          # Clean up full version tag (e.g., v0.7.1)
          ./scripts/cleanup-arch-tags.sh "${TAG}"
          
          # Clean up minor version tag (e.g., 0.7)
          # Extract major.minor from tag (remove 'v' prefix and patch version)
          MINOR_TAG=$(echo "${TAG}" | sed -E 's/^v?([0-9]+\.[0-9]+).*/\1/')
          ./scripts/cleanup-arch-tags.sh "${MINOR_TAG}"
          
          # Clean up latest tag
          ./scripts/cleanup-arch-tags.sh "latest"
          
          # TODO: For 1.0.0+ releases, also clean up major version tags
          # MAJOR_TAG=$(echo "${TAG}" | sed -E 's/^v?([0-9]+).*/\1/')
          # if [ "${MAJOR_TAG}" != "0" ]; then
          #   ./scripts/cleanup-arch-tags.sh "${MAJOR_TAG}"
          # fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dist
          path: dist/
